In NASA, 2 researchers, Mathew & John, started their work on a brand new planet, but while practicing on that research they faced a mathematical issue . In order to save the time Mathew & John divided their work. So NASA scientist Mathew worked on a piece & invented a number  calculated with the following formula:  
NASA researcher Mathew number is computed as follows by  using the following formula: H(n) = n(2n-1) 
NASA scientist John invented another number which is built by the following formula which is also called as John number. T(n) = n(n+1)/2 
Now NASA, 2 researchers ,Mathew & John are jumbled while combining their work. Now help Mathew & John combine their research work by searching out number in a given range that satisfies both properties. Using the above formula, the 1st few NASA researcher Mathew-John numbers are: 1 6 15 28 â€¦
Input Format

i/p consists of THREE integers as follow : T1 ,T2 and M separated by space .
T1 upper limits  & T2 are  lower limits of the range. The range is inclusive of both T1 & T2. Find Mth number in the range [T1,T2] which is actually a  NASA researcher Mathew-John number.

Constraints
0 < T1 < T2 < 1000000

Output Format

Print out Mth number from formed sequence between T1 & T2 :


SNo.	Input	Output
1               	90 150 2             	120
2	20 80 6	No number is present at this index
3	-5 3 a	Invalid Input


// code
/* package codechef; // don't place package name! */
// Written by Indiver Piyush

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		int lower = 0;
		int upper = 0;
		int n = 0;
		int mathew = 0,john = 0;
		int temp,ans;
		Scanner sc = new Scanner(System.in);
		ArrayList<Integer> ls = new ArrayList<Integer>();
		ArrayList<Integer> ls1 = new ArrayList<Integer>();
		lower = Integer.parseInt(sc.next().trim());
		if(lower<0){
		    System.out.println("Invalid Input");
		    System.exit(0);
		}
		upper = Integer.parseInt(sc.next().trim());
		if(upper<0 || upper<lower){
		    System.out.println("Invalid Input");
		    System.exit(0);
		}
		try{
		n = Integer.parseInt(sc.next().trim());
		}catch(Exception e){
		    System.out.println("Invalid Input");
		    System.exit(0);
		}
		int m1 = 1;
		while(m1<lower){
		    mathew = m1*(2*m1-1);
		    if(mathew>=lower){
		        break;
		    }
		    m1 = m1 + 1;
		}
		//System.out.println(m1);
		int m2 = 1;
		while(m2<lower){
		    john = m2*(m2+1)/2;
		    if(john>=lower){
		        break;
		    }
		    m2 = m2 + 1;
		}
		//System.out.println(m2);
		for(int i = m1;i<=m1+n;i++){
		    temp = i*(2*i-1);
		    ls.add(temp);
		    
		}
		for(int i = m2;i<=m2+n;i++){
		    temp = i*(i+1)/2;
		    if(ls.contains(temp)){
		    ls1.add(temp);}
		}
		Collections.sort(ls1);
		Set<Integer> s = new HashSet<Integer>(ls1);
		ArrayList<Integer> ls2 = new ArrayList<Integer>(s);
		Collections.sort(ls2);
		//System.out.println(ls2);
		if(n>ls2.size()){
		    System.out.println("No number is present at this index");
		    System.exit(0);
		}
		ans = ls2.get(n-1);
		if(ans>=lower && ans<=upper){
		    System.out.println(ans);
		}else{
		    System.out.println("No number is present at this index");
		}
	
		
	}
}
